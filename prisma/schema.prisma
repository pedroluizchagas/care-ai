// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  avatar    String?
  phone     String?
  location  String?
  position  String?
  company   String?
  bio       String?
  joinDate  DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  tasks         Task[]
  notes         Note[]
  goals         Goal[]
  events        Event[]
  chatSessions  ChatSession[]
  achievements  UserAchievement[]
  preferences   UserPreferences?
  
  // Financial relationships
  financialCategories    FinancialCategory[]
  financialTransactions  FinancialTransaction[]
  financialBudgets       FinancialBudget[]
  financialAccounts      FinancialAccount[]

  @@map("users")
}

model UserPreferences {
  id                String  @id @default(cuid())
  userId            String  @unique
  theme             String  @default("dark")
  language          String  @default("pt-BR")
  emailNotifications Boolean @default(true)
  pushNotifications Boolean @default(true)
  soundNotifications Boolean @default(false)
  analyticsEnabled   Boolean @default(true)
  crashReportsEnabled Boolean @default(true)
  dataCollectionEnabled Boolean @default(true)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?
  completed   Boolean  @default(false)
  priority    String   @default("MEDIUM") // LOW, MEDIUM, HIGH, CRITICAL
  category    String   @default("Geral")
  dueDate     DateTime?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model Note {
  id        String   @id @default(cuid())
  title     String
  content   String
  category  String   @default("Geral")
  tags      String   @default("") // JSON array as string
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notes")
}

model Goal {
  id          String    @id @default(cuid())
  title       String
  description String?
  target      Float
  current     Float     @default(0)
  category    String    @default("Pessoal")
  deadline    DateTime?
  isCompleted Boolean   @default(false)
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("goals")
}

model ChatSession {
  id        String      @id @default(cuid())
  title     String      @default("Nova Conversa")
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  userId    String

  user     User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages ChatMessage[]

  @@map("chat_sessions")
}

model ChatMessage {
  id            String   @id @default(cuid())
  content       String
  role          String
  timestamp     DateTime @default(now())
  functionCalls String?
  sessionId     String

  chatSession ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())

  @@map("chat_messages")
}

model Achievement {
  id          String @id @default(cuid())
  title       String @unique
  description String
  icon        String
  category    String
  points      Int    @default(0)

  userAchievements UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id            String   @id @default(cuid())
  userId        String
  achievementId String
  earnedAt      DateTime @default(now())

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@map("user_achievements")
}

model Event {
  id          String    @id @default(cuid())
  title       String
  description String?
  location    String?
  category    String    @default("Evento")
  startDate   DateTime
  endDate     DateTime?
  allDay      Boolean   @default(false)
  priority    String    @default("MEDIUM") // LOW, MEDIUM, HIGH, CRITICAL
  reminder    String? // 15min, 30min, 1hour, 1day
  attendees   String? // comma-separated
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("events")
}

// Financial Models
model FinancialCategory {
  id        String   @id @default(cuid())
  name      String
  icon      String   @default("ðŸ’°")
  color     String   @default("#3B82F6")
  type      String   // INCOME, EXPENSE
  userId    String
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user         User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions FinancialTransaction[]
  budgets      FinancialBudget[]

  @@map("financial_categories")
}

model FinancialTransaction {
  id            String   @id @default(cuid())
  title         String
  description   String?
  amount        Float
  type          String   // INCOME, EXPENSE
  categoryId    String
  paymentMethod String   @default("CASH") // CASH, DEBIT, CREDIT, PIX, TRANSFER
  date          DateTime @default(now())
  recurrence    String   @default("NONE") // NONE, DAILY, WEEKLY, MONTHLY, YEARLY
  isRecurring   Boolean  @default(false)
  tags          String   @default("") // JSON array as string
  userId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user     User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  category FinancialCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("financial_transactions")
}

model FinancialBudget {
  id           String   @id @default(cuid())
  categoryId   String
  month        Int
  year         Int
  budgetAmount Float
  spentAmount  Float    @default(0)
  userId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user     User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  category FinancialCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([categoryId, month, year])
  @@map("financial_budgets")
}

model FinancialAccount {
  id        String   @id @default(cuid())
  name      String
  type      String   @default("CHECKING") // CHECKING, SAVINGS, INVESTMENT, CASH
  balance   Float    @default(0)
  currency  String   @default("BRL")
  bankName  String?
  isActive  Boolean  @default(true)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("financial_accounts")
}

// Routine Models (manter para compatibilidade)
model RoutineTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  season      String   @default("all") // spring, summer, autumn, winter, all
  userId      String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  dayRoutines DayRoutine[]

  @@map("routine_templates")
}

model DayRoutine {
  id                String   @id @default(cuid())
  dayOfWeek         Int      // 0-6 (Sunday = 0)
  name              String   // "Segunda-feira", etc.
  isActive          Boolean  @default(true)
  routineTemplateId String

  routineTemplate RoutineTemplate @relation(fields: [routineTemplateId], references: [id], onDelete: Cascade)
  blocks          RoutineBlock[]

  @@map("day_routines")
}

model RoutineBlock {
  id           String   @id @default(cuid())
  title        String
  description  String?
  startTime    String   // HH:MM format
  endTime      String   // HH:MM format
  category     String
  color        String   @default("#3B82F6")
  isActive     Boolean  @default(true)
  isFlexible   Boolean  @default(false)
  tags         String   @default("") // JSON array as string
  dayRoutineId String

  dayRoutine   DayRoutine          @relation(fields: [dayRoutineId], references: [id], onDelete: Cascade)
  completions  RoutineCompletion[]

  @@map("routine_blocks")
}

model RoutineCompletion {
  id              String    @id @default(cuid())
  date            String    // YYYY-MM-DD format
  completedAt     DateTime  @default(now())
  notes           String?
  rating          Int?      // 1-5
  duration        Int?      // minutes actually spent
  routineBlockId  String

  routineBlock RoutineBlock @relation(fields: [routineBlockId], references: [id], onDelete: Cascade)

  @@unique([routineBlockId, date])
  @@map("routine_completions")
}

model RoutineCategory {
  id          String @id @default(cuid())
  name        String @unique
  color       String
  icon        String
  description String?

  @@map("routine_categories")
} 